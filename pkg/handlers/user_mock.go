// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handlers/user.go

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user 	"my/redditclone/pkg/user"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepo) AddUser(login, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", login, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepoMockRecorder) AddUser(login, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepo)(nil).AddUser), login, pass)
}

// Authorize mocks base method.
func (m *MockUserRepo) Authorize(login, pass string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", login, pass)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserRepoMockRecorder) Authorize(login, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserRepo)(nil).Authorize), login, pass)
}

// MockSessManager is a mock of SessManager interface.
type MockSessManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessManagerMockRecorder
}

// MockSessManagerMockRecorder is the mock recorder for MockSessManager.
type MockSessManagerMockRecorder struct {
	mock *MockSessManager
}

// NewMockSessManager creates a new mock instance.
func NewMockSessManager(ctrl *gomock.Controller) *MockSessManager {
	mock := &MockSessManager{ctrl: ctrl}
	mock.recorder = &MockSessManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessManager) EXPECT() *MockSessManagerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessManager) Check(inToken string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", inToken)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessManagerMockRecorder) Check(inToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessManager)(nil).Check), inToken)
}

// Create mocks base method.
func (m *MockSessManager) Create(id, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", id, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessManagerMockRecorder) Create(id, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessManager)(nil).Create), id, login)
}
