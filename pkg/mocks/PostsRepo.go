// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	post "my/redditclone/pkg/post"

	mock "github.com/stretchr/testify/mock"
)

// PostsRepo is an autogenerated mock type for the PostsRepo type
type PostsRepo struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: postID, body, authorID, login
func (_m *PostsRepo) AddComment(postID string, body string, authorID string, login string) (*post.Post, error) {
	ret := _m.Called(postID, body, authorID, login)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string, string, string, string) *post.Post); ok {
		r0 = rf(postID, body, authorID, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(postID, body, authorID, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPost provides a mock function with given fields: postJSON, id, login
func (_m *PostsRepo) AddPost(postJSON *post.Post, id string, login string) error {
	ret := _m.Called(postJSON, id, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post, string, string) error); ok {
		r0 = rf(postJSON, id, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Category provides a mock function with given fields: name
func (_m *PostsRepo) Category(name string) ([]*post.Post, error) {
	ret := _m.Called(name)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: postID, authorID
func (_m *PostsRepo) Delete(postID string, authorID string) error {
	ret := _m.Called(postID, authorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(postID, authorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: postID, commentID, authorID
func (_m *PostsRepo) DeleteComment(postID string, commentID string, authorID string) (*post.Post, error) {
	ret := _m.Called(postID, commentID, authorID)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string, string, string) *post.Post); ok {
		r0 = rf(postID, commentID, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(postID, commentID, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPostsInMongoDB provides a mock function with given fields: bson
func (_m *PostsRepo) FindPostsInMongoDB(bson interface{}) ([]*post.Post, error) {
	ret := _m.Called(bson)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(interface{}) []*post.Post); ok {
		r0 = rf(bson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(bson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PostsRepo) GetAll() ([]*post.Post, error) {
	ret := _m.Called()

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func() []*post.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenPost provides a mock function with given fields: id
func (_m *PostsRepo) OpenPost(id string) (*post.Post, error) {
	ret := _m.Called(id)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string) *post.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnVote provides a mock function with given fields: authorID, postID
func (_m *PostsRepo) UnVote(authorID string, postID string) (*post.Post, error) {
	ret := _m.Called(authorID, postID)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(string, string) *post.Post); ok {
		r0 = rf(authorID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(authorID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: name
func (_m *PostsRepo) User(name string) ([]*post.Post, error) {
	ret := _m.Called(name)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: vote, authorID, postID
func (_m *PostsRepo) Vote(vote int, authorID string, postID string) (*post.Post, error) {
	ret := _m.Called(vote, authorID, postID)

	var r0 *post.Post
	if rf, ok := ret.Get(0).(func(int, string, string) *post.Post); ok {
		r0 = rf(vote, authorID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(vote, authorID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostsRepo creates a new instance of PostsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostsRepo(t mockConstructorTestingTNewPostsRepo) *PostsRepo {
	mock := &PostsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
